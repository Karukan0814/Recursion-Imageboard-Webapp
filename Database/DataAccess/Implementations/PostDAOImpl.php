<?php

namespace Database\DataAccess\Implementations;

use Database\DataAccess\Interfaces\PostDAO;
use Database\DatabaseManager;
use Models\DataTimeStamp;
use Models\Post;

class PostDAOImpl implements PostDAO
{
    public function create(Post $postData) :?Post {
        // if ($postData->getPost_id() !== null) throw new \Exception('Cannot create a post with an existing ID. id: ' . $postData->getPost_id());
        $this->createOrUpdate($postData);
       $result= $this->getById($postData->getPost_id());
        return $result;
    }

    public function getById(string $post_id): ?Post
    {
        $mysqli = DatabaseManager::getMysqliConnection();
        $Post = $mysqli->prepareAndFetchAll("SELECT * FROM posts WHERE post_id = ?", 's', [$post_id])[0] ?? null;

        return $Post === null ? null : $this->resultToPost($Post);
    }

    public function update(Post $postData): bool
    {
        if ($postData->getPost_id() === null) throw new \Exception('post specified has no ID.');

        $current = $this->getById($postData->getPost_id());
        if ($current === null) throw new \Exception(sprintf("post %s does not exist.", $postData->getPost_id()));

        return $this->createOrUpdate($postData);
    }

    public function delete(string $post_id): bool


    {
        // 引数であるidが空でないか確認
        if ($post_id === null) throw new \Exception('post specified has no ID.');

        //当該idが存在するか確認
        $current = $this->getById($post_id);
        if ($current === null) throw new \Exception(sprintf("post %s does not exist.", $post_id));

        // 削除のSQLを発行
        $mysqli = DatabaseManager::getMysqliConnection();
        $result = $mysqli->prepareAndExecute("DELETE FROM posts WHERE id = ?", 's', [$post_id]);
        return $result;
    }

    public function getRandom(): ?Post
    {
        $mysqli = DatabaseManager::getMysqliConnection();
        $Post = $mysqli->prepareAndFetchAll("SELECT * FROM posts ORDER BY RAND() LIMIT 1", '', [])[0] ?? null;

        return $Post === null ? null : $this->resultToPost($Post);
    }

    public function getAll(int $offset, int $limit): array
    {
        $mysqli = DatabaseManager::getMysqliConnection();

        $query = "SELECT * FROM posts LIMIT ?, ?";

        $results = $mysqli->prepareAndFetchAll($query, 'ii', [$offset, $limit]);

        return $results === null ? [] : $this->resultsToPosts($results);
    }

    public function getAllByType(string $type, int $offset, int $limit): array
    {
        $mysqli = DatabaseManager::getMysqliConnection();

        $query = "SELECT * FROM posts WHERE type = ? LIMIT ?, ?";

        $results = $mysqli->prepareAndFetchAll($query, 'sii', [$type, $offset, $limit]);
        return $results === null ? [] : $this->resultsToPosts($results);
    }

    public function getAllThreads(int $offset, int $limit): array
    {
        $mysqli = DatabaseManager::getMysqliConnection();

        $query = "SELECT * FROM posts WHERE reply_to_id IS NULL ORDER BY created_at DESC LIMIT ?, ?";

        $results = $mysqli->prepareAndFetchAll($query, 'ii', [ $offset, $limit]);
        return $results === null ? [] : $this->resultsToPosts($results);
    }

    
    public function getReplies(Post $postData, int $offset, int $limit): array
    {
        $mysqli = DatabaseManager::getMysqliConnection();

        $query = "SELECT * FROM posts WHERE reply_to_id = ? ORDER BY created_at DESC LIMIT ?, ?";

        $results = $mysqli->prepareAndFetchAll($query, 'sii', [$postData->getPost_id(), $offset, $limit]);
        return $results === null ? [] : $this->resultsToPosts($results);
    }

    
    public function createOrUpdate(Post $postData): bool
    {
        $mysqli = DatabaseManager::getMysqliConnection();
    
        $query =
            <<<SQL
            INSERT INTO posts (post_id, reply_to_id, subject, text,file_name)
            VALUES (?, ?, ?, ?,?)
            ON DUPLICATE KEY UPDATE
                reply_to_id = VALUES(reply_to_id),
                subject = VALUES(subject),
                text = VALUES(text),
                file_name=VALUES(file_name);

        SQL;
    
        $result = $mysqli->prepareAndExecute(
            $query,
            'sssss',
            [
                $postData->getPost_id(),
                $postData->getReply_to_id(),
                $postData->getSubject(),
                $postData->getText(),
                $postData->getFileName()

            ]
        );
    
        if (!$result) {
            return false;
        }
    
        // If post_id is null, set the new ID generated by auto-increment
        if ($postData->getPost_id() === null) {
            $postData->setPost_id((string)$mysqli->insert_id);
        }
    
        return true;
    }
    

    private function resultToPost(array $data): Post
{
    return new Post(
        post_id: $data['post_id'],
        reply_to_id: $data['reply_to_id'],
        subject: $data['subject'],
        text: $data['text'],
        file_name: $data['file_name'],
        created_at: $data['created_at'],
        updated_at: $data['updated_at']


    );
}
    private function resultsToPosts(array $results): array
    {
        $Posts = [];

        foreach ($results as $result) {
            $Posts[] = $this->resultToPost($result);
        }

        return $Posts;
    }
}
